/* FILE GENERATED AUTOMATICALLY, DO NOT EDIT */

#include <string>
#include <scip/scip.h>
#include "SCIPMILPSolver.h"

using namespace SMSpp_di_unipi_it;

const std::array< std::string, SCIP_NUM_INT_PARS > SCIPMILPSolver::SMSpp_to_SCIP_int_pars{
 "branching/preferbinary",
 "branching/delaypscostupdate",
 "branching/divingpscost",
 "branching/forceallchildren",
 "branching/checksol",
 "branching/roundsbsol",
 "branching/sumadjustscore",
 "compression/enable",
 "conflict/enable",
 "conflict/cleanboundexceedings",
 "conflict/uselocalrows",
 "conflict/useprop",
 "conflict/usesb",
 "conflict/usepseudo",
 "conflict/minmaxvars",
 "conflict/maxlploops",
 "conflict/lpiterations",
 "conflict/fuiplevels",
 "conflict/interconss",
 "conflict/reconvlevels",
 "conflict/maxconss",
 "conflict/maxstoresize",
 "conflict/preferbinary",
 "conflict/prefinfproof",
 "conflict/allowlocal",
 "conflict/settlelocal",
 "conflict/repropagate",
 "conflict/keepreprop",
 "conflict/separate",
 "conflict/dynamic",
 "conflict/removable",
 "conflict/restartnum",
 "conflict/ignorerelaxedbd",
 "conflict/maxvarsdetectimpliedbounds",
 "conflict/fullshortenconflict",
 "conflict/sepaaltproofs",
 "constraints/agelimit",
 "constraints/obsoleteage",
 "constraints/disableenfops",
 "display/verblevel",
 "display/width",
 "display/freq",
 "display/headerfreq",
 "display/lpinfo",
 "display/allviols",
 "display/relevantstats",
 "heuristics/useuctsubscip",
 "history/valuebased",
 "history/allowmerge",
 "history/allowtransfer",
 "limits/nodes",
 "limits/totalnodes",
 "limits/stallnodes",
 "limits/solutions",
 "limits/bestsol",
 "limits/maxsol",
 "limits/maxorigsol",
 "limits/restarts",
 "limits/autorestartnodes",
 "lp/solvefreq",
 "lp/iterlim",
 "lp/rootiterlim",
 "lp/solvedepth",
 "lp/clearinitialprobinglp",
 "lp/resolverestore",
 "lp/freesolvalbuffers",
 "lp/colagelimit",
 "lp/rowagelimit",
 "lp/cleanupcols",
 "lp/cleanupcolsroot",
 "lp/cleanuprows",
 "lp/cleanuprowsroot",
 "lp/checkstability",
 "lp/checkprimfeas",
 "lp/checkdualfeas",
 "lp/checkfarkas",
 "lp/fastmip",
 "lp/scaling",
 "lp/presolving",
 "lp/lexdualalgo",
 "lp/lexdualrootonly",
 "lp/lexdualmaxrounds",
 "lp/lexdualbasic",
 "lp/lexdualstalling",
 "lp/disablecutoff",
 "lp/threads",
 "lp/resolveitermin",
 "lp/solutionpolishing",
 "lp/refactorinterval",
 "lp/alwaysgetduals",
 "nlp/disable",
 "memory/arraygrowinit",
 "memory/treegrowinit",
 "memory/pathgrowinit",
 "misc/catchctrlc",
 "misc/usevartable",
 "misc/useconstable",
 "misc/usesmalltables",
 "misc/resetstat",
 "misc/improvingsols",
 "misc/printreason",
 "misc/estimexternmem",
 "misc/avoidmemout",
 "misc/transorigsols",
 "misc/transsolsorig",
 "misc/calcintegral",
 "misc/finitesolutionstore",
 "misc/outputorigsol",
 "misc/allowstrongdualreds",
 "misc/allowweakdualreds",
 "misc/scaleobj",
 "misc/showdivingstats",
 "misc/usesymmetry",
 "randomization/randomseedshift",
 "randomization/permutationseed",
 "randomization/permuteconss",
 "randomization/permutevars",
 "randomization/lpseed",
 "presolving/maxrounds",
 "presolving/maxrestarts",
 "presolving/donotmultaggr",
 "presolving/donotaggr",
 "pricing/maxvars",
 "pricing/maxvarsroot",
 "pricing/delvars",
 "pricing/delvarsroot",
 "decomposition/benderslabels",
 "decomposition/applybenders",
 "decomposition/maxgraphedge",
 "decomposition/disablemeasures",
 "benders/cutlpsol",
 "benders/copybenders",
 "propagating/maxrounds",
 "propagating/maxroundsroot",
 "propagating/abortoncutoff",
 "reoptimization/enable",
 "reoptimization/maxsavednodes",
 "reoptimization/maxdiffofnodes",
 "reoptimization/globalcons/sepainfsubtrees",
 "reoptimization/sepabestsol",
 "reoptimization/storevarhistory",
 "reoptimization/usepscost",
 "reoptimization/solvelp",
 "reoptimization/solvelpdiff",
 "reoptimization/savesols",
 "reoptimization/commontimelimit",
 "reoptimization/shrinkinner",
 "reoptimization/strongbranchinginit",
 "reoptimization/reducetofrontier",
 "reoptimization/forceheurrestart",
 "reoptimization/saveconsprop",
 "reoptimization/usesplitcons",
 "reoptimization/usecuts",
 "reoptimization/maxcutage",
 "separating/filtercutpoolrel",
 "separating/maxruns",
 "separating/maxrounds",
 "separating/maxroundsroot",
 "separating/maxroundsrootsubrun",
 "separating/maxaddrounds",
 "separating/maxstallrounds",
 "separating/maxstallroundsroot",
 "separating/maxcuts",
 "separating/maxcutsroot",
 "separating/cutagelimit",
 "separating/poolfreq",
 "parallel/mode",
 "parallel/minnthreads",
 "parallel/maxnthreads",
 "concurrent/changeseeds",
 "concurrent/changechildsel",
 "concurrent/commvarbnds",
 "concurrent/presolvebefore",
 "concurrent/initseed",
 "concurrent/sync/maxnsols",
 "concurrent/sync/maxnsyncdelay",
 "concurrent/sync/nbestsols",
 "timing/clocktype",
 "timing/enabled",
 "timing/reading",
 "timing/rareclockcheck",
 "timing/statistictiming",
 "timing/nlpieval",
 "visual/realtime",
 "visual/dispsols",
 "visual/displb",
 "visual/objextern",
 "reading/initialconss",
 "reading/dynamicconss",
 "reading/dynamiccols",
 "reading/dynamicrows",
 "write/allconss",
 "write/printzeros",
 "write/genericnamesoffset",
};

const std::array< std::string, SCIP_NUM_DBL_PARS > SCIPMILPSolver::SMSpp_to_SCIP_dbl_pars{
 "branching/scorefac",
 "branching/clamp",
 "branching/midpull",
 "branching/midpullreldomtrig",
 "conflict/maxvarsfac",
 "conflict/graph/depthscorefac",
 "conflict/proofscorefac",
 "conflict/uplockscorefac",
 "conflict/downlockscorefac",
 "conflict/scorefac",
 "conflict/restartfac",
 "conflict/conflictweight",
 "conflict/conflictgraphweight",
 "conflict/minimprove",
 "conflict/weightsize",
 "conflict/weightrepropdepth",
 "conflict/weightvaliddepth",
 "limits/time",
 "limits/memory",
 "limits/gap",
 "limits/absgap",
 "lp/conditionlimit",
 "lp/minmarkowitz",
 "lp/rowrepswitch",
 "lp/resolveiterfac",
 "memory/savefac",
 "memory/arraygrowfac",
 "memory/treegrowfac",
 "memory/pathgrowfac",
 "misc/referencevalue",
 "numerics/infinity",
 "numerics/epsilon",
 "numerics/sumepsilon",
 "numerics/feastol",
 "numerics/checkfeastolfac",
 "numerics/lpfeastolfactor",
 "numerics/dualfeastol",
 "numerics/barrierconvtol",
 "numerics/boundstreps",
 "numerics/pseudocosteps",
 "numerics/pseudocostdelta",
 "numerics/recomputefac",
 "numerics/hugeval",
 "presolving/abortfac",
 "presolving/restartfac",
 "presolving/clqtablefac",
 "presolving/immrestartfac",
 "presolving/subrestartfac",
 "presolving/restartminred",
 "pricing/abortfac",
 "benders/solutiontol",
 "reoptimization/objsimrootLP",
 "reoptimization/objsimsol",
 "reoptimization/delay",
 "separating/maxbounddist",
 "separating/maxlocalbounddist",
 "separating/maxcoefratio",
 "separating/maxcoefratiofacrowprep",
 "separating/minefficacy",
 "separating/minefficacyroot",
 "separating/minactivityquot",
 "concurrent/sync/freqinit",
 "concurrent/sync/freqmax",
 "concurrent/sync/freqfactor",
 "concurrent/sync/targetprogress",
 "concurrent/sync/minsyncdelay",
};

const std::array< std::string, SCIP_NUM_STR_PARS > SCIPMILPSolver::SMSpp_to_SCIP_str_pars{
 "branching/scorefunc",
 "branching/lpgainnormalize",
 "branching/firstsbchild",
 "conflict/useinflp",
 "conflict/useboundlp",
 "lp/initalgorithm",
 "lp/resolvealgorithm",
 "lp/pricing",
 "nlp/solver",
 "nodeselection/childsel",
 "reoptimization/varorderinterdiction",
 "separating/orthofunc",
 "separating/efficacynorm",
 "separating/cutselrestart",
 "separating/cutselsubscip",
 "concurrent/paramsetprefix",
 "visual/vbcfilename",
 "visual/bakfilename",
};

const std::array< std::pair< std::string, int >, SCIP_NUM_INT_PARS >
 SCIPMILPSolver::SCIP_to_SMSpp_int_pars{
 {
  { "branching/preferbinary", intFirstSCIPPar + 0 },
  { "branching/delaypscostupdate", intFirstSCIPPar + 1 },
  { "branching/divingpscost", intFirstSCIPPar + 2 },
  { "branching/forceallchildren", intFirstSCIPPar + 3 },
  { "branching/checksol", intFirstSCIPPar + 4 },
  { "branching/roundsbsol", intFirstSCIPPar + 5 },
  { "branching/sumadjustscore", intFirstSCIPPar + 6 },
  { "compression/enable", intFirstSCIPPar + 7 },
  { "conflict/enable", intFirstSCIPPar + 8 },
  { "conflict/cleanboundexceedings", intFirstSCIPPar + 9 },
  { "conflict/uselocalrows", intFirstSCIPPar + 10 },
  { "conflict/useprop", intFirstSCIPPar + 11 },
  { "conflict/usesb", intFirstSCIPPar + 12 },
  { "conflict/usepseudo", intFirstSCIPPar + 13 },
  { "conflict/minmaxvars", intFirstSCIPPar + 14 },
  { "conflict/maxlploops", intFirstSCIPPar + 15 },
  { "conflict/lpiterations", intFirstSCIPPar + 16 },
  { "conflict/fuiplevels", intFirstSCIPPar + 17 },
  { "conflict/interconss", intFirstSCIPPar + 18 },
  { "conflict/reconvlevels", intFirstSCIPPar + 19 },
  { "conflict/maxconss", intFirstSCIPPar + 20 },
  { "conflict/maxstoresize", intFirstSCIPPar + 21 },
  { "conflict/preferbinary", intFirstSCIPPar + 22 },
  { "conflict/prefinfproof", intFirstSCIPPar + 23 },
  { "conflict/allowlocal", intFirstSCIPPar + 24 },
  { "conflict/settlelocal", intFirstSCIPPar + 25 },
  { "conflict/repropagate", intFirstSCIPPar + 26 },
  { "conflict/keepreprop", intFirstSCIPPar + 27 },
  { "conflict/separate", intFirstSCIPPar + 28 },
  { "conflict/dynamic", intFirstSCIPPar + 29 },
  { "conflict/removable", intFirstSCIPPar + 30 },
  { "conflict/restartnum", intFirstSCIPPar + 31 },
  { "conflict/ignorerelaxedbd", intFirstSCIPPar + 32 },
  { "conflict/maxvarsdetectimpliedbounds", intFirstSCIPPar + 33 },
  { "conflict/fullshortenconflict", intFirstSCIPPar + 34 },
  { "conflict/sepaaltproofs", intFirstSCIPPar + 35 },
  { "constraints/agelimit", intFirstSCIPPar + 36 },
  { "constraints/obsoleteage", intFirstSCIPPar + 37 },
  { "constraints/disableenfops", intFirstSCIPPar + 38 },
  { "display/verblevel", intFirstSCIPPar + 39 },
  { "display/width", intFirstSCIPPar + 40 },
  { "display/freq", intFirstSCIPPar + 41 },
  { "display/headerfreq", intFirstSCIPPar + 42 },
  { "display/lpinfo", intFirstSCIPPar + 43 },
  { "display/allviols", intFirstSCIPPar + 44 },
  { "display/relevantstats", intFirstSCIPPar + 45 },
  { "heuristics/useuctsubscip", intFirstSCIPPar + 46 },
  { "history/valuebased", intFirstSCIPPar + 47 },
  { "history/allowmerge", intFirstSCIPPar + 48 },
  { "history/allowtransfer", intFirstSCIPPar + 49 },
  { "limits/nodes", intFirstSCIPPar + 50 },
  { "limits/totalnodes", intFirstSCIPPar + 51 },
  { "limits/stallnodes", intFirstSCIPPar + 52 },
  { "limits/solutions", intFirstSCIPPar + 53 },
  { "limits/bestsol", intFirstSCIPPar + 54 },
  { "limits/maxsol", intFirstSCIPPar + 55 },
  { "limits/maxorigsol", intFirstSCIPPar + 56 },
  { "limits/restarts", intFirstSCIPPar + 57 },
  { "limits/autorestartnodes", intFirstSCIPPar + 58 },
  { "lp/solvefreq", intFirstSCIPPar + 59 },
  { "lp/iterlim", intFirstSCIPPar + 60 },
  { "lp/rootiterlim", intFirstSCIPPar + 61 },
  { "lp/solvedepth", intFirstSCIPPar + 62 },
  { "lp/clearinitialprobinglp", intFirstSCIPPar + 63 },
  { "lp/resolverestore", intFirstSCIPPar + 64 },
  { "lp/freesolvalbuffers", intFirstSCIPPar + 65 },
  { "lp/colagelimit", intFirstSCIPPar + 66 },
  { "lp/rowagelimit", intFirstSCIPPar + 67 },
  { "lp/cleanupcols", intFirstSCIPPar + 68 },
  { "lp/cleanupcolsroot", intFirstSCIPPar + 69 },
  { "lp/cleanuprows", intFirstSCIPPar + 70 },
  { "lp/cleanuprowsroot", intFirstSCIPPar + 71 },
  { "lp/checkstability", intFirstSCIPPar + 72 },
  { "lp/checkprimfeas", intFirstSCIPPar + 73 },
  { "lp/checkdualfeas", intFirstSCIPPar + 74 },
  { "lp/checkfarkas", intFirstSCIPPar + 75 },
  { "lp/fastmip", intFirstSCIPPar + 76 },
  { "lp/scaling", intFirstSCIPPar + 77 },
  { "lp/presolving", intFirstSCIPPar + 78 },
  { "lp/lexdualalgo", intFirstSCIPPar + 79 },
  { "lp/lexdualrootonly", intFirstSCIPPar + 80 },
  { "lp/lexdualmaxrounds", intFirstSCIPPar + 81 },
  { "lp/lexdualbasic", intFirstSCIPPar + 82 },
  { "lp/lexdualstalling", intFirstSCIPPar + 83 },
  { "lp/disablecutoff", intFirstSCIPPar + 84 },
  { "lp/threads", intFirstSCIPPar + 85 },
  { "lp/resolveitermin", intFirstSCIPPar + 86 },
  { "lp/solutionpolishing", intFirstSCIPPar + 87 },
  { "lp/refactorinterval", intFirstSCIPPar + 88 },
  { "lp/alwaysgetduals", intFirstSCIPPar + 89 },
  { "nlp/disable", intFirstSCIPPar + 90 },
  { "memory/arraygrowinit", intFirstSCIPPar + 91 },
  { "memory/treegrowinit", intFirstSCIPPar + 92 },
  { "memory/pathgrowinit", intFirstSCIPPar + 93 },
  { "misc/catchctrlc", intFirstSCIPPar + 94 },
  { "misc/usevartable", intFirstSCIPPar + 95 },
  { "misc/useconstable", intFirstSCIPPar + 96 },
  { "misc/usesmalltables", intFirstSCIPPar + 97 },
  { "misc/resetstat", intFirstSCIPPar + 98 },
  { "misc/improvingsols", intFirstSCIPPar + 99 },
  { "misc/printreason", intFirstSCIPPar + 100 },
  { "misc/estimexternmem", intFirstSCIPPar + 101 },
  { "misc/avoidmemout", intFirstSCIPPar + 102 },
  { "misc/transorigsols", intFirstSCIPPar + 103 },
  { "misc/transsolsorig", intFirstSCIPPar + 104 },
  { "misc/calcintegral", intFirstSCIPPar + 105 },
  { "misc/finitesolutionstore", intFirstSCIPPar + 106 },
  { "misc/outputorigsol", intFirstSCIPPar + 107 },
  { "misc/allowstrongdualreds", intFirstSCIPPar + 108 },
  { "misc/allowweakdualreds", intFirstSCIPPar + 109 },
  { "misc/scaleobj", intFirstSCIPPar + 110 },
  { "misc/showdivingstats", intFirstSCIPPar + 111 },
  { "misc/usesymmetry", intFirstSCIPPar + 112 },
  { "randomization/randomseedshift", intFirstSCIPPar + 113 },
  { "randomization/permutationseed", intFirstSCIPPar + 114 },
  { "randomization/permuteconss", intFirstSCIPPar + 115 },
  { "randomization/permutevars", intFirstSCIPPar + 116 },
  { "randomization/lpseed", intFirstSCIPPar + 117 },
  { "presolving/maxrounds", intFirstSCIPPar + 118 },
  { "presolving/maxrestarts", intFirstSCIPPar + 119 },
  { "presolving/donotmultaggr", intFirstSCIPPar + 120 },
  { "presolving/donotaggr", intFirstSCIPPar + 121 },
  { "pricing/maxvars", intFirstSCIPPar + 122 },
  { "pricing/maxvarsroot", intFirstSCIPPar + 123 },
  { "pricing/delvars", intFirstSCIPPar + 124 },
  { "pricing/delvarsroot", intFirstSCIPPar + 125 },
  { "decomposition/benderslabels", intFirstSCIPPar + 126 },
  { "decomposition/applybenders", intFirstSCIPPar + 127 },
  { "decomposition/maxgraphedge", intFirstSCIPPar + 128 },
  { "decomposition/disablemeasures", intFirstSCIPPar + 129 },
  { "benders/cutlpsol", intFirstSCIPPar + 130 },
  { "benders/copybenders", intFirstSCIPPar + 131 },
  { "propagating/maxrounds", intFirstSCIPPar + 132 },
  { "propagating/maxroundsroot", intFirstSCIPPar + 133 },
  { "propagating/abortoncutoff", intFirstSCIPPar + 134 },
  { "reoptimization/enable", intFirstSCIPPar + 135 },
  { "reoptimization/maxsavednodes", intFirstSCIPPar + 136 },
  { "reoptimization/maxdiffofnodes", intFirstSCIPPar + 137 },
  { "reoptimization/globalcons/sepainfsubtrees", intFirstSCIPPar + 138 },
  { "reoptimization/sepabestsol", intFirstSCIPPar + 139 },
  { "reoptimization/storevarhistory", intFirstSCIPPar + 140 },
  { "reoptimization/usepscost", intFirstSCIPPar + 141 },
  { "reoptimization/solvelp", intFirstSCIPPar + 142 },
  { "reoptimization/solvelpdiff", intFirstSCIPPar + 143 },
  { "reoptimization/savesols", intFirstSCIPPar + 144 },
  { "reoptimization/commontimelimit", intFirstSCIPPar + 145 },
  { "reoptimization/shrinkinner", intFirstSCIPPar + 146 },
  { "reoptimization/strongbranchinginit", intFirstSCIPPar + 147 },
  { "reoptimization/reducetofrontier", intFirstSCIPPar + 148 },
  { "reoptimization/forceheurrestart", intFirstSCIPPar + 149 },
  { "reoptimization/saveconsprop", intFirstSCIPPar + 150 },
  { "reoptimization/usesplitcons", intFirstSCIPPar + 151 },
  { "reoptimization/usecuts", intFirstSCIPPar + 152 },
  { "reoptimization/maxcutage", intFirstSCIPPar + 153 },
  { "separating/filtercutpoolrel", intFirstSCIPPar + 154 },
  { "separating/maxruns", intFirstSCIPPar + 155 },
  { "separating/maxrounds", intFirstSCIPPar + 156 },
  { "separating/maxroundsroot", intFirstSCIPPar + 157 },
  { "separating/maxroundsrootsubrun", intFirstSCIPPar + 158 },
  { "separating/maxaddrounds", intFirstSCIPPar + 159 },
  { "separating/maxstallrounds", intFirstSCIPPar + 160 },
  { "separating/maxstallroundsroot", intFirstSCIPPar + 161 },
  { "separating/maxcuts", intFirstSCIPPar + 162 },
  { "separating/maxcutsroot", intFirstSCIPPar + 163 },
  { "separating/cutagelimit", intFirstSCIPPar + 164 },
  { "separating/poolfreq", intFirstSCIPPar + 165 },
  { "parallel/mode", intFirstSCIPPar + 166 },
  { "parallel/minnthreads", intFirstSCIPPar + 167 },
  { "parallel/maxnthreads", intFirstSCIPPar + 168 },
  { "concurrent/changeseeds", intFirstSCIPPar + 169 },
  { "concurrent/changechildsel", intFirstSCIPPar + 170 },
  { "concurrent/commvarbnds", intFirstSCIPPar + 171 },
  { "concurrent/presolvebefore", intFirstSCIPPar + 172 },
  { "concurrent/initseed", intFirstSCIPPar + 173 },
  { "concurrent/sync/maxnsols", intFirstSCIPPar + 174 },
  { "concurrent/sync/maxnsyncdelay", intFirstSCIPPar + 175 },
  { "concurrent/sync/nbestsols", intFirstSCIPPar + 176 },
  { "timing/clocktype", intFirstSCIPPar + 177 },
  { "timing/enabled", intFirstSCIPPar + 178 },
  { "timing/reading", intFirstSCIPPar + 179 },
  { "timing/rareclockcheck", intFirstSCIPPar + 180 },
  { "timing/statistictiming", intFirstSCIPPar + 181 },
  { "timing/nlpieval", intFirstSCIPPar + 182 },
  { "visual/realtime", intFirstSCIPPar + 183 },
  { "visual/dispsols", intFirstSCIPPar + 184 },
  { "visual/displb", intFirstSCIPPar + 185 },
  { "visual/objextern", intFirstSCIPPar + 186 },
  { "reading/initialconss", intFirstSCIPPar + 187 },
  { "reading/dynamicconss", intFirstSCIPPar + 188 },
  { "reading/dynamiccols", intFirstSCIPPar + 189 },
  { "reading/dynamicrows", intFirstSCIPPar + 190 },
  { "write/allconss", intFirstSCIPPar + 191 },
  { "write/printzeros", intFirstSCIPPar + 192 },
  { "write/genericnamesoffset", intFirstSCIPPar + 193 },
 }
};

const std::array< std::pair< std::string, int >, SCIP_NUM_DBL_PARS >
 SCIPMILPSolver::SCIP_to_SMSpp_dbl_pars{
 {
  { "branching/scorefac", dblFirstSCIPPar + 0 },
  { "branching/clamp", dblFirstSCIPPar + 1 },
  { "branching/midpull", dblFirstSCIPPar + 2 },
  { "branching/midpullreldomtrig", dblFirstSCIPPar + 3 },
  { "conflict/maxvarsfac", dblFirstSCIPPar + 4 },
  { "conflict/graph/depthscorefac", dblFirstSCIPPar + 5 },
  { "conflict/proofscorefac", dblFirstSCIPPar + 6 },
  { "conflict/uplockscorefac", dblFirstSCIPPar + 7 },
  { "conflict/downlockscorefac", dblFirstSCIPPar + 8 },
  { "conflict/scorefac", dblFirstSCIPPar + 9 },
  { "conflict/restartfac", dblFirstSCIPPar + 10 },
  { "conflict/conflictweight", dblFirstSCIPPar + 11 },
  { "conflict/conflictgraphweight", dblFirstSCIPPar + 12 },
  { "conflict/minimprove", dblFirstSCIPPar + 13 },
  { "conflict/weightsize", dblFirstSCIPPar + 14 },
  { "conflict/weightrepropdepth", dblFirstSCIPPar + 15 },
  { "conflict/weightvaliddepth", dblFirstSCIPPar + 16 },
  { "limits/time", dblFirstSCIPPar + 17 },
  { "limits/memory", dblFirstSCIPPar + 18 },
  { "limits/gap", dblFirstSCIPPar + 19 },
  { "limits/absgap", dblFirstSCIPPar + 20 },
  { "lp/conditionlimit", dblFirstSCIPPar + 21 },
  { "lp/minmarkowitz", dblFirstSCIPPar + 22 },
  { "lp/rowrepswitch", dblFirstSCIPPar + 23 },
  { "lp/resolveiterfac", dblFirstSCIPPar + 24 },
  { "memory/savefac", dblFirstSCIPPar + 25 },
  { "memory/arraygrowfac", dblFirstSCIPPar + 26 },
  { "memory/treegrowfac", dblFirstSCIPPar + 27 },
  { "memory/pathgrowfac", dblFirstSCIPPar + 28 },
  { "misc/referencevalue", dblFirstSCIPPar + 29 },
  { "numerics/infinity", dblFirstSCIPPar + 30 },
  { "numerics/epsilon", dblFirstSCIPPar + 31 },
  { "numerics/sumepsilon", dblFirstSCIPPar + 32 },
  { "numerics/feastol", dblFirstSCIPPar + 33 },
  { "numerics/checkfeastolfac", dblFirstSCIPPar + 34 },
  { "numerics/lpfeastolfactor", dblFirstSCIPPar + 35 },
  { "numerics/dualfeastol", dblFirstSCIPPar + 36 },
  { "numerics/barrierconvtol", dblFirstSCIPPar + 37 },
  { "numerics/boundstreps", dblFirstSCIPPar + 38 },
  { "numerics/pseudocosteps", dblFirstSCIPPar + 39 },
  { "numerics/pseudocostdelta", dblFirstSCIPPar + 40 },
  { "numerics/recomputefac", dblFirstSCIPPar + 41 },
  { "numerics/hugeval", dblFirstSCIPPar + 42 },
  { "presolving/abortfac", dblFirstSCIPPar + 43 },
  { "presolving/restartfac", dblFirstSCIPPar + 44 },
  { "presolving/clqtablefac", dblFirstSCIPPar + 45 },
  { "presolving/immrestartfac", dblFirstSCIPPar + 46 },
  { "presolving/subrestartfac", dblFirstSCIPPar + 47 },
  { "presolving/restartminred", dblFirstSCIPPar + 48 },
  { "pricing/abortfac", dblFirstSCIPPar + 49 },
  { "benders/solutiontol", dblFirstSCIPPar + 50 },
  { "reoptimization/objsimrootLP", dblFirstSCIPPar + 51 },
  { "reoptimization/objsimsol", dblFirstSCIPPar + 52 },
  { "reoptimization/delay", dblFirstSCIPPar + 53 },
  { "separating/maxbounddist", dblFirstSCIPPar + 54 },
  { "separating/maxlocalbounddist", dblFirstSCIPPar + 55 },
  { "separating/maxcoefratio", dblFirstSCIPPar + 56 },
  { "separating/maxcoefratiofacrowprep", dblFirstSCIPPar + 57 },
  { "separating/minefficacy", dblFirstSCIPPar + 58 },
  { "separating/minefficacyroot", dblFirstSCIPPar + 59 },
  { "separating/minactivityquot", dblFirstSCIPPar + 60 },
  { "concurrent/sync/freqinit", dblFirstSCIPPar + 61 },
  { "concurrent/sync/freqmax", dblFirstSCIPPar + 62 },
  { "concurrent/sync/freqfactor", dblFirstSCIPPar + 63 },
  { "concurrent/sync/targetprogress", dblFirstSCIPPar + 64 },
  { "concurrent/sync/minsyncdelay", dblFirstSCIPPar + 65 },
 }
};

const std::array< std::pair< std::string, int >, SCIP_NUM_STR_PARS >
 SCIPMILPSolver::SCIP_to_SMSpp_str_pars{
 {
  { "branching/scorefunc", strFirstSCIPPar + 0 },
  { "branching/lpgainnormalize", strFirstSCIPPar + 1 },
  { "branching/firstsbchild", strFirstSCIPPar + 2 },
  { "conflict/useinflp", strFirstSCIPPar + 3 },
  { "conflict/useboundlp", strFirstSCIPPar + 4 },
  { "lp/initalgorithm", strFirstSCIPPar + 5 },
  { "lp/resolvealgorithm", strFirstSCIPPar + 6 },
  { "lp/pricing", strFirstSCIPPar + 7 },
  { "nlp/solver", strFirstSCIPPar + 8 },
  { "nodeselection/childsel", strFirstSCIPPar + 9 },
  { "reoptimization/varorderinterdiction", strFirstSCIPPar + 10 },
  { "separating/orthofunc", strFirstSCIPPar + 11 },
  { "separating/efficacynorm", strFirstSCIPPar + 12 },
  { "separating/cutselrestart", strFirstSCIPPar + 13 },
  { "separating/cutselsubscip", strFirstSCIPPar + 14 },
  { "concurrent/paramsetprefix", strFirstSCIPPar + 15 },
  { "visual/vbcfilename", strFirstSCIPPar + 16 },
  { "visual/bakfilename", strFirstSCIPPar + 17 },
 }
};
