/* FILE GENERATED AUTOMATICALLY, DO NOT EDIT */

#include <ilcplex/cplex.h>
#include "CPXMILPSolver.h"

using namespace SMSpp_di_unipi_it;

const std::array< int, CPX_NUM_INT_PARS > CPXMILPSolver::SMSpp_to_CPLEX_int_pars{
 CPXPARAM_Advance,
 CPXPARAM_Preprocessing_Fill,
 CPXPARAM_Preprocessing_Aggregator,
 CPXPARAM_ClockType,
 CPXPARAM_Simplex_Crash,
 CPXPARAM_Preprocessing_Dependency,
 CPXPARAM_Simplex_DGradient,
 CPXPARAM_Simplex_Pricing,
 CPXPARAM_Simplex_Display,
 CPXPARAM_Simplex_Limits_Iterations,
 CPXPARAM_Read_Constraints,
 CPXPARAM_Network_NetFind,
 CPXPARAM_Read_Variables,
 CPXPARAM_Read_Nonzeros,
 CPXPARAM_Simplex_Perturbation_Indicator,
 CPXPARAM_Simplex_Limits_Perturbation,
 CPXPARAM_Simplex_PGradient,
 CPXPARAM_Preprocessing_Presolve,
 CPXPARAM_Simplex_Refactor,
 CPXPARAM_Read_Scale,
 CPXPARAM_ScreenOutput,
 CPXPARAM_Simplex_Limits_Singularity,
 CPXPARAM_Preprocessing_Dual,
 CPXPARAM_Preprocessing_NumPass,
 CPXPARAM_Read_DataCheck,
 CPXPARAM_Preprocessing_Reduce,
 CPXPARAM_Preprocessing_Linear,
 CPXPARAM_LPMethod,
 CPXPARAM_QPMethod,
 CPXPARAM_Threads,
 CPXPARAM_Conflict_Algorithm,
 CPXPARAM_Conflict_Display,
 CPXPARAM_Sifting_Display,
 CPXPARAM_Sifting_Algorithm,
 CPXPARAM_Sifting_Iterations,
 CPXPARAM_Output_MPSLong,
 CPXPARAM_Emphasis_Memory,
 CPXPARAM_Emphasis_Numerical,
 CPXPARAM_Feasopt_Mode,
 CPXPARAM_Parallel,
 CPXPARAM_Tune_Measure,
 CPXPARAM_Tune_Repeat,
 CPXPARAM_Tune_Display,
 CPXPARAM_Output_WriteLevel,
 CPXPARAM_RandomSeed,
 CPXPARAM_OptimalityTarget,
 CPXPARAM_Output_CloneLog,
 CPXPARAM_SolutionType,
 CPXPARAM_Read_WarningLimit,
 CPXPARAM_Sifting_Simplex,
 CPXPARAM_Simplex_DynamicRows,
 CPXPARAM_Record,
 CPXPARAM_ParamDisplay,
 CPXPARAM_Preprocessing_Folding,
 CPXPARAM_Preprocessing_Reformulations,
 CPXPARAM_Benders_WorkerAlgorithm,
 CPXPARAM_Benders_Strategy,
 CPXPARAM_MultiObjective_Display,
 CPXPARAM_MIP_Strategy_Branch,
 CPXPARAM_MIP_Cuts_Cliques,
 CPXPARAM_Preprocessing_CoeffReduce,
 CPXPARAM_MIP_Cuts_Covers,
 CPXPARAM_MIP_Display,
 CPXPARAM_MIP_Interval,
 CPXPARAM_MIP_Limits_Solutions,
 CPXPARAM_MIP_Strategy_File,
 CPXPARAM_MIP_Limits_Nodes,
 CPXPARAM_MIP_Strategy_NodeSelect,
 CPXPARAM_MIP_Strategy_Order,
 CPXPARAM_MIP_Strategy_StartAlgorithm,
 CPXPARAM_MIP_Strategy_SubAlgorithm,
 CPXPARAM_MIP_Strategy_VariableSelect,
 CPXPARAM_Preprocessing_BoundStrength,
 CPXPARAM_MIP_Strategy_HeuristicFreq,
 CPXPARAM_MIP_OrderType,
 CPXPARAM_Preprocessing_Relax,
 CPXPARAM_MIP_Strategy_PresolveNode,
 CPXPARAM_MIP_Strategy_BBInterval,
 CPXPARAM_MIP_Cuts_FlowCovers,
 CPXPARAM_MIP_Cuts_Implied,
 CPXPARAM_MIP_Strategy_Probe,
 CPXPARAM_MIP_Cuts_GUBCovers,
 CPXPARAM_MIP_Limits_StrongCand,
 CPXPARAM_MIP_Limits_StrongIt,
 CPXPARAM_MIP_Limits_GomoryCand,
 CPXPARAM_MIP_Cuts_Gomory,
 CPXPARAM_MIP_Limits_GomoryPass,
 CPXPARAM_MIP_Cuts_PathCut,
 CPXPARAM_MIP_Cuts_MIRCut,
 CPXPARAM_MIP_Cuts_Disjunctive,
 CPXPARAM_MIP_Limits_AggForCut,
 CPXPARAM_MIP_Strategy_CallbackReducedLP,
 CPXPARAM_MIP_Limits_CutPasses,
 CPXPARAM_Emphasis_MIP,
 CPXPARAM_Preprocessing_Symmetry,
 CPXPARAM_MIP_Strategy_Dive,
 CPXPARAM_MIP_Strategy_RINSHeur,
 CPXPARAM_MIP_Strategy_LBHeur,
 CPXPARAM_Preprocessing_RepeatPresolve,
 CPXPARAM_MIP_Limits_RepairTries,
 CPXPARAM_MIP_Strategy_FPHeur,
 CPXPARAM_MIP_Limits_EachCutLimit,
 CPXPARAM_MIP_Pool_Capacity,
 CPXPARAM_MIP_Pool_Replace,
 CPXPARAM_MIP_Pool_Intensity,
 CPXPARAM_MIP_Limits_Populate,
 CPXPARAM_MIP_Strategy_Search,
 CPXPARAM_MIP_Strategy_MIQCPStrat,
 CPXPARAM_MIP_Cuts_ZeroHalfCut,
 CPXPARAM_MIP_PolishAfter_Nodes,
 CPXPARAM_MIP_PolishAfter_Solutions,
 CPXPARAM_MIP_Cuts_MCFCut,
 CPXPARAM_MIP_Strategy_KappaStats,
 CPXPARAM_MIP_Limits_AuxRootThreads,
 CPXPARAM_MIP_Cuts_LiftProj,
 CPXPARAM_MIP_Cuts_Nodecuts,
 CPXPARAM_MIP_Cuts_LocalImplied,
 CPXPARAM_MIP_Cuts_BQP,
 CPXPARAM_MIP_Cuts_RLT,
 CPXPARAM_MIP_SubMIP_StartAlg,
 CPXPARAM_MIP_SubMIP_SubAlg,
 CPXPARAM_MIP_SubMIP_Scale,
 CPXPARAM_MIP_SubMIP_NodeLimit,
 CPXPARAM_Preprocessing_SOS1Reform,
 CPXPARAM_Preprocessing_SOS2Reform,
 CPXPARAM_Barrier_Algorithm,
 CPXPARAM_Barrier_ColNonzeros,
 CPXPARAM_Barrier_Display,
 CPXPARAM_Barrier_Limits_Iteration,
 CPXPARAM_Barrier_Limits_Corrections,
 CPXPARAM_Barrier_Ordering,
 CPXPARAM_Barrier_StartAlg,
 CPXPARAM_Barrier_Crossover,
 CPXPARAM_Read_QPNonzeros,
 CPXPARAM_Preprocessing_QCPDuals,
 CPXPARAM_Preprocessing_QPMakePSD,
 CPXPARAM_Preprocessing_QToLin,
 CPXPARAM_Network_Iterations,
 CPXPARAM_Network_Pricing,
 CPXPARAM_Network_Display,
};

const std::array< int, CPX_NUM_DBL_PARS > CPXMILPSolver::SMSpp_to_CPLEX_dbl_pars{
 CPXPARAM_Simplex_Tolerances_Markowitz,
 CPXPARAM_Simplex_Tolerances_Optimality,
 CPXPARAM_Simplex_Perturbation_Constant,
 CPXPARAM_Simplex_Tolerances_Feasibility,
 CPXPARAM_Simplex_Limits_LowerObj,
 CPXPARAM_Simplex_Limits_UpperObj,
 CPXPARAM_TimeLimit,
 CPXPARAM_WorkMem,
 CPXPARAM_Tune_TimeLimit,
 CPXPARAM_DetTimeLimit,
 CPXPARAM_Tune_DetTimeLimit,
 CPXPARAM_Benders_Tolerances_FeasibilityCut,
 CPXPARAM_Benders_Tolerances_OptimalityCut,
 CPXPARAM_MIP_Strategy_Backtrack,
 CPXPARAM_MIP_Tolerances_LowerCutoff,
 CPXPARAM_MIP_Tolerances_UpperCutoff,
 CPXPARAM_MIP_Tolerances_AbsMIPGap,
 CPXPARAM_MIP_Tolerances_MIPGap,
 CPXPARAM_MIP_Tolerances_Integrality,
 CPXPARAM_MIP_Tolerances_ObjDifference,
 CPXPARAM_MIP_Tolerances_RelObjDifference,
 CPXPARAM_MIP_Limits_TreeMemory,
 CPXPARAM_MIP_Limits_CutsFactor,
 CPXPARAM_MIP_Limits_ProbeTime,
 CPXPARAM_MIP_Tolerances_Linearization,
 CPXPARAM_Feasopt_Tolerance,
 CPXPARAM_MIP_Pool_RelGap,
 CPXPARAM_MIP_Pool_AbsGap,
 CPXPARAM_MIP_Strategy_HeuristicEffort,
 CPXPARAM_MIP_PolishAfter_AbsMIPGap,
 CPXPARAM_MIP_PolishAfter_MIPGap,
 CPXPARAM_MIP_PolishAfter_Time,
 CPXPARAM_MIP_Limits_ProbeDetTime,
 CPXPARAM_MIP_PolishAfter_DetTime,
 CPXPARAM_MIP_Limits_LowerObjStop,
 CPXPARAM_MIP_Limits_UpperObjStop,
 CPXPARAM_Barrier_ConvergeTol,
 CPXPARAM_Barrier_Limits_Growth,
 CPXPARAM_Barrier_Limits_ObjRange,
 CPXPARAM_Barrier_QCPConvergeTol,
 CPXPARAM_Network_Tolerances_Optimality,
 CPXPARAM_Network_Tolerances_Feasibility,
};

const std::array< int, CPX_NUM_STR_PARS > CPXMILPSolver::SMSpp_to_CPLEX_str_pars{
 CPXPARAM_WorkDir,
 CPXPARAM_Read_FileEncoding,
 CPXPARAM_Read_APIEncoding,
 CPXPARAM_CPUmask,
 CPXPARAM_Output_IntSolFilePrefix,
};

const std::array< std::pair< int, int >, CPX_NUM_INT_PARS >
 CPXMILPSolver::CPLEX_to_SMSpp_int_pars{
 {
  { CPXPARAM_Advance, intFirstCPLEXPar + 0 },
  { CPXPARAM_Preprocessing_Fill, intFirstCPLEXPar + 1 },
  { CPXPARAM_Preprocessing_Aggregator, intFirstCPLEXPar + 2 },
  { CPXPARAM_ClockType, intFirstCPLEXPar + 3 },
  { CPXPARAM_Simplex_Crash, intFirstCPLEXPar + 4 },
  { CPXPARAM_Preprocessing_Dependency, intFirstCPLEXPar + 5 },
  { CPXPARAM_Simplex_DGradient, intFirstCPLEXPar + 6 },
  { CPXPARAM_Simplex_Pricing, intFirstCPLEXPar + 7 },
  { CPXPARAM_Simplex_Display, intFirstCPLEXPar + 8 },
  { CPXPARAM_Simplex_Limits_Iterations, intFirstCPLEXPar + 9 },
  { CPXPARAM_Read_Constraints, intFirstCPLEXPar + 10 },
  { CPXPARAM_Network_NetFind, intFirstCPLEXPar + 11 },
  { CPXPARAM_Read_Variables, intFirstCPLEXPar + 12 },
  { CPXPARAM_Read_Nonzeros, intFirstCPLEXPar + 13 },
  { CPXPARAM_Simplex_Perturbation_Indicator, intFirstCPLEXPar + 14 },
  { CPXPARAM_Simplex_Limits_Perturbation, intFirstCPLEXPar + 15 },
  { CPXPARAM_Simplex_PGradient, intFirstCPLEXPar + 16 },
  { CPXPARAM_Preprocessing_Presolve, intFirstCPLEXPar + 17 },
  { CPXPARAM_Simplex_Refactor, intFirstCPLEXPar + 18 },
  { CPXPARAM_Read_Scale, intFirstCPLEXPar + 19 },
  { CPXPARAM_ScreenOutput, intFirstCPLEXPar + 20 },
  { CPXPARAM_Simplex_Limits_Singularity, intFirstCPLEXPar + 21 },
  { CPXPARAM_Preprocessing_Dual, intFirstCPLEXPar + 22 },
  { CPXPARAM_Preprocessing_NumPass, intFirstCPLEXPar + 23 },
  { CPXPARAM_Read_DataCheck, intFirstCPLEXPar + 24 },
  { CPXPARAM_Preprocessing_Reduce, intFirstCPLEXPar + 25 },
  { CPXPARAM_Preprocessing_Linear, intFirstCPLEXPar + 26 },
  { CPXPARAM_LPMethod, intFirstCPLEXPar + 27 },
  { CPXPARAM_QPMethod, intFirstCPLEXPar + 28 },
  { CPXPARAM_Threads, intFirstCPLEXPar + 29 },
  { CPXPARAM_Conflict_Algorithm, intFirstCPLEXPar + 30 },
  { CPXPARAM_Conflict_Display, intFirstCPLEXPar + 31 },
  { CPXPARAM_Sifting_Display, intFirstCPLEXPar + 32 },
  { CPXPARAM_Sifting_Algorithm, intFirstCPLEXPar + 33 },
  { CPXPARAM_Sifting_Iterations, intFirstCPLEXPar + 34 },
  { CPXPARAM_Output_MPSLong, intFirstCPLEXPar + 35 },
  { CPXPARAM_Emphasis_Memory, intFirstCPLEXPar + 36 },
  { CPXPARAM_Emphasis_Numerical, intFirstCPLEXPar + 37 },
  { CPXPARAM_Feasopt_Mode, intFirstCPLEXPar + 38 },
  { CPXPARAM_Parallel, intFirstCPLEXPar + 39 },
  { CPXPARAM_Tune_Measure, intFirstCPLEXPar + 40 },
  { CPXPARAM_Tune_Repeat, intFirstCPLEXPar + 41 },
  { CPXPARAM_Tune_Display, intFirstCPLEXPar + 42 },
  { CPXPARAM_Output_WriteLevel, intFirstCPLEXPar + 43 },
  { CPXPARAM_RandomSeed, intFirstCPLEXPar + 44 },
  { CPXPARAM_OptimalityTarget, intFirstCPLEXPar + 45 },
  { CPXPARAM_Output_CloneLog, intFirstCPLEXPar + 46 },
  { CPXPARAM_SolutionType, intFirstCPLEXPar + 47 },
  { CPXPARAM_Read_WarningLimit, intFirstCPLEXPar + 48 },
  { CPXPARAM_Sifting_Simplex, intFirstCPLEXPar + 49 },
  { CPXPARAM_Simplex_DynamicRows, intFirstCPLEXPar + 50 },
  { CPXPARAM_Record, intFirstCPLEXPar + 51 },
  { CPXPARAM_ParamDisplay, intFirstCPLEXPar + 52 },
  { CPXPARAM_Preprocessing_Folding, intFirstCPLEXPar + 53 },
  { CPXPARAM_Preprocessing_Reformulations, intFirstCPLEXPar + 54 },
  { CPXPARAM_Benders_WorkerAlgorithm, intFirstCPLEXPar + 55 },
  { CPXPARAM_Benders_Strategy, intFirstCPLEXPar + 56 },
  { CPXPARAM_MultiObjective_Display, intFirstCPLEXPar + 57 },
  { CPXPARAM_MIP_Strategy_Branch, intFirstCPLEXPar + 58 },
  { CPXPARAM_MIP_Cuts_Cliques, intFirstCPLEXPar + 59 },
  { CPXPARAM_Preprocessing_CoeffReduce, intFirstCPLEXPar + 60 },
  { CPXPARAM_MIP_Cuts_Covers, intFirstCPLEXPar + 61 },
  { CPXPARAM_MIP_Display, intFirstCPLEXPar + 62 },
  { CPXPARAM_MIP_Interval, intFirstCPLEXPar + 63 },
  { CPXPARAM_MIP_Limits_Solutions, intFirstCPLEXPar + 64 },
  { CPXPARAM_MIP_Strategy_File, intFirstCPLEXPar + 65 },
  { CPXPARAM_MIP_Limits_Nodes, intFirstCPLEXPar + 66 },
  { CPXPARAM_MIP_Strategy_NodeSelect, intFirstCPLEXPar + 67 },
  { CPXPARAM_MIP_Strategy_Order, intFirstCPLEXPar + 68 },
  { CPXPARAM_MIP_Strategy_StartAlgorithm, intFirstCPLEXPar + 69 },
  { CPXPARAM_MIP_Strategy_SubAlgorithm, intFirstCPLEXPar + 70 },
  { CPXPARAM_MIP_Strategy_VariableSelect, intFirstCPLEXPar + 71 },
  { CPXPARAM_Preprocessing_BoundStrength, intFirstCPLEXPar + 72 },
  { CPXPARAM_MIP_Strategy_HeuristicFreq, intFirstCPLEXPar + 73 },
  { CPXPARAM_MIP_OrderType, intFirstCPLEXPar + 74 },
  { CPXPARAM_Preprocessing_Relax, intFirstCPLEXPar + 75 },
  { CPXPARAM_MIP_Strategy_PresolveNode, intFirstCPLEXPar + 76 },
  { CPXPARAM_MIP_Strategy_BBInterval, intFirstCPLEXPar + 77 },
  { CPXPARAM_MIP_Cuts_FlowCovers, intFirstCPLEXPar + 78 },
  { CPXPARAM_MIP_Cuts_Implied, intFirstCPLEXPar + 79 },
  { CPXPARAM_MIP_Strategy_Probe, intFirstCPLEXPar + 80 },
  { CPXPARAM_MIP_Cuts_GUBCovers, intFirstCPLEXPar + 81 },
  { CPXPARAM_MIP_Limits_StrongCand, intFirstCPLEXPar + 82 },
  { CPXPARAM_MIP_Limits_StrongIt, intFirstCPLEXPar + 83 },
  { CPXPARAM_MIP_Limits_GomoryCand, intFirstCPLEXPar + 84 },
  { CPXPARAM_MIP_Cuts_Gomory, intFirstCPLEXPar + 85 },
  { CPXPARAM_MIP_Limits_GomoryPass, intFirstCPLEXPar + 86 },
  { CPXPARAM_MIP_Cuts_PathCut, intFirstCPLEXPar + 87 },
  { CPXPARAM_MIP_Cuts_MIRCut, intFirstCPLEXPar + 88 },
  { CPXPARAM_MIP_Cuts_Disjunctive, intFirstCPLEXPar + 89 },
  { CPXPARAM_MIP_Limits_AggForCut, intFirstCPLEXPar + 90 },
  { CPXPARAM_MIP_Strategy_CallbackReducedLP, intFirstCPLEXPar + 91 },
  { CPXPARAM_MIP_Limits_CutPasses, intFirstCPLEXPar + 92 },
  { CPXPARAM_Emphasis_MIP, intFirstCPLEXPar + 93 },
  { CPXPARAM_Preprocessing_Symmetry, intFirstCPLEXPar + 94 },
  { CPXPARAM_MIP_Strategy_Dive, intFirstCPLEXPar + 95 },
  { CPXPARAM_MIP_Strategy_RINSHeur, intFirstCPLEXPar + 96 },
  { CPXPARAM_MIP_Strategy_LBHeur, intFirstCPLEXPar + 97 },
  { CPXPARAM_Preprocessing_RepeatPresolve, intFirstCPLEXPar + 98 },
  { CPXPARAM_MIP_Limits_RepairTries, intFirstCPLEXPar + 99 },
  { CPXPARAM_MIP_Strategy_FPHeur, intFirstCPLEXPar + 100 },
  { CPXPARAM_MIP_Limits_EachCutLimit, intFirstCPLEXPar + 101 },
  { CPXPARAM_MIP_Pool_Capacity, intFirstCPLEXPar + 102 },
  { CPXPARAM_MIP_Pool_Replace, intFirstCPLEXPar + 103 },
  { CPXPARAM_MIP_Pool_Intensity, intFirstCPLEXPar + 104 },
  { CPXPARAM_MIP_Limits_Populate, intFirstCPLEXPar + 105 },
  { CPXPARAM_MIP_Strategy_Search, intFirstCPLEXPar + 106 },
  { CPXPARAM_MIP_Strategy_MIQCPStrat, intFirstCPLEXPar + 107 },
  { CPXPARAM_MIP_Cuts_ZeroHalfCut, intFirstCPLEXPar + 108 },
  { CPXPARAM_MIP_PolishAfter_Nodes, intFirstCPLEXPar + 109 },
  { CPXPARAM_MIP_PolishAfter_Solutions, intFirstCPLEXPar + 110 },
  { CPXPARAM_MIP_Cuts_MCFCut, intFirstCPLEXPar + 111 },
  { CPXPARAM_MIP_Strategy_KappaStats, intFirstCPLEXPar + 112 },
  { CPXPARAM_MIP_Limits_AuxRootThreads, intFirstCPLEXPar + 113 },
  { CPXPARAM_MIP_Cuts_LiftProj, intFirstCPLEXPar + 114 },
  { CPXPARAM_MIP_Cuts_Nodecuts, intFirstCPLEXPar + 115 },
  { CPXPARAM_MIP_Cuts_LocalImplied, intFirstCPLEXPar + 116 },
  { CPXPARAM_MIP_Cuts_BQP, intFirstCPLEXPar + 117 },
  { CPXPARAM_MIP_Cuts_RLT, intFirstCPLEXPar + 118 },
  { CPXPARAM_MIP_SubMIP_StartAlg, intFirstCPLEXPar + 119 },
  { CPXPARAM_MIP_SubMIP_SubAlg, intFirstCPLEXPar + 120 },
  { CPXPARAM_MIP_SubMIP_Scale, intFirstCPLEXPar + 121 },
  { CPXPARAM_MIP_SubMIP_NodeLimit, intFirstCPLEXPar + 122 },
  { CPXPARAM_Preprocessing_SOS1Reform, intFirstCPLEXPar + 123 },
  { CPXPARAM_Preprocessing_SOS2Reform, intFirstCPLEXPar + 124 },
  { CPXPARAM_Barrier_Algorithm, intFirstCPLEXPar + 125 },
  { CPXPARAM_Barrier_ColNonzeros, intFirstCPLEXPar + 126 },
  { CPXPARAM_Barrier_Display, intFirstCPLEXPar + 127 },
  { CPXPARAM_Barrier_Limits_Iteration, intFirstCPLEXPar + 128 },
  { CPXPARAM_Barrier_Limits_Corrections, intFirstCPLEXPar + 129 },
  { CPXPARAM_Barrier_Ordering, intFirstCPLEXPar + 130 },
  { CPXPARAM_Barrier_StartAlg, intFirstCPLEXPar + 131 },
  { CPXPARAM_Barrier_Crossover, intFirstCPLEXPar + 132 },
  { CPXPARAM_Read_QPNonzeros, intFirstCPLEXPar + 133 },
  { CPXPARAM_Preprocessing_QCPDuals, intFirstCPLEXPar + 134 },
  { CPXPARAM_Preprocessing_QPMakePSD, intFirstCPLEXPar + 135 },
  { CPXPARAM_Preprocessing_QToLin, intFirstCPLEXPar + 136 },
  { CPXPARAM_Network_Iterations, intFirstCPLEXPar + 137 },
  { CPXPARAM_Network_Pricing, intFirstCPLEXPar + 138 },
  { CPXPARAM_Network_Display, intFirstCPLEXPar + 139 },
 }
};

const std::array< std::pair< int, int >, CPX_NUM_DBL_PARS >
 CPXMILPSolver::CPLEX_to_SMSpp_dbl_pars{
 {
  { CPXPARAM_Simplex_Tolerances_Markowitz, dblFirstCPLEXPar + 0 },
  { CPXPARAM_Simplex_Tolerances_Optimality, dblFirstCPLEXPar + 1 },
  { CPXPARAM_Simplex_Perturbation_Constant, dblFirstCPLEXPar + 2 },
  { CPXPARAM_Simplex_Tolerances_Feasibility, dblFirstCPLEXPar + 3 },
  { CPXPARAM_Simplex_Limits_LowerObj, dblFirstCPLEXPar + 4 },
  { CPXPARAM_Simplex_Limits_UpperObj, dblFirstCPLEXPar + 5 },
  { CPXPARAM_TimeLimit, dblFirstCPLEXPar + 6 },
  { CPXPARAM_WorkMem, dblFirstCPLEXPar + 7 },
  { CPXPARAM_Tune_TimeLimit, dblFirstCPLEXPar + 8 },
  { CPXPARAM_DetTimeLimit, dblFirstCPLEXPar + 9 },
  { CPXPARAM_Tune_DetTimeLimit, dblFirstCPLEXPar + 10 },
  { CPXPARAM_Benders_Tolerances_FeasibilityCut, dblFirstCPLEXPar + 11 },
  { CPXPARAM_Benders_Tolerances_OptimalityCut, dblFirstCPLEXPar + 12 },
  { CPXPARAM_MIP_Strategy_Backtrack, dblFirstCPLEXPar + 13 },
  { CPXPARAM_MIP_Tolerances_LowerCutoff, dblFirstCPLEXPar + 14 },
  { CPXPARAM_MIP_Tolerances_UpperCutoff, dblFirstCPLEXPar + 15 },
  { CPXPARAM_MIP_Tolerances_AbsMIPGap, dblFirstCPLEXPar + 16 },
  { CPXPARAM_MIP_Tolerances_MIPGap, dblFirstCPLEXPar + 17 },
  { CPXPARAM_MIP_Tolerances_Integrality, dblFirstCPLEXPar + 18 },
  { CPXPARAM_MIP_Tolerances_ObjDifference, dblFirstCPLEXPar + 19 },
  { CPXPARAM_MIP_Tolerances_RelObjDifference, dblFirstCPLEXPar + 20 },
  { CPXPARAM_MIP_Limits_TreeMemory, dblFirstCPLEXPar + 21 },
  { CPXPARAM_MIP_Limits_CutsFactor, dblFirstCPLEXPar + 22 },
  { CPXPARAM_MIP_Limits_ProbeTime, dblFirstCPLEXPar + 23 },
  { CPXPARAM_MIP_Tolerances_Linearization, dblFirstCPLEXPar + 24 },
  { CPXPARAM_Feasopt_Tolerance, dblFirstCPLEXPar + 25 },
  { CPXPARAM_MIP_Pool_RelGap, dblFirstCPLEXPar + 26 },
  { CPXPARAM_MIP_Pool_AbsGap, dblFirstCPLEXPar + 27 },
  { CPXPARAM_MIP_Strategy_HeuristicEffort, dblFirstCPLEXPar + 28 },
  { CPXPARAM_MIP_PolishAfter_AbsMIPGap, dblFirstCPLEXPar + 29 },
  { CPXPARAM_MIP_PolishAfter_MIPGap, dblFirstCPLEXPar + 30 },
  { CPXPARAM_MIP_PolishAfter_Time, dblFirstCPLEXPar + 31 },
  { CPXPARAM_MIP_Limits_ProbeDetTime, dblFirstCPLEXPar + 32 },
  { CPXPARAM_MIP_PolishAfter_DetTime, dblFirstCPLEXPar + 33 },
  { CPXPARAM_MIP_Limits_LowerObjStop, dblFirstCPLEXPar + 34 },
  { CPXPARAM_MIP_Limits_UpperObjStop, dblFirstCPLEXPar + 35 },
  { CPXPARAM_Barrier_ConvergeTol, dblFirstCPLEXPar + 36 },
  { CPXPARAM_Barrier_Limits_Growth, dblFirstCPLEXPar + 37 },
  { CPXPARAM_Barrier_Limits_ObjRange, dblFirstCPLEXPar + 38 },
  { CPXPARAM_Barrier_QCPConvergeTol, dblFirstCPLEXPar + 39 },
  { CPXPARAM_Network_Tolerances_Optimality, dblFirstCPLEXPar + 40 },
  { CPXPARAM_Network_Tolerances_Feasibility, dblFirstCPLEXPar + 41 },
 }
};

const std::array< std::pair< int, int >, CPX_NUM_STR_PARS >
 CPXMILPSolver::CPLEX_to_SMSpp_str_pars{
 {
  { CPXPARAM_WorkDir, strFirstCPLEXPar + 0 },
  { CPXPARAM_Read_FileEncoding, strFirstCPLEXPar + 1 },
  { CPXPARAM_Read_APIEncoding, strFirstCPLEXPar + 2 },
  { CPXPARAM_CPUmask, strFirstCPLEXPar + 3 },
  { CPXPARAM_Output_IntSolFilePrefix, strFirstCPLEXPar + 4 },
 }
};
